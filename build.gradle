plugins {
    id 'java'
    id 'groovy'
    id 'eclipse'
    id 'maven-publish'
}

compileJava.options.encoding = 'UTF-8'


group = 'ua.net.nlp'
version="2.0-SNAPSHOT"

repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {
    implementation group: 'org.codehaus.groovy', name: 'groovy', version: '3.0.9'
    implementation group: 'org.codehaus.groovy', name: 'groovy-json', version: '3.0.9'
//    implementation group: 'org.codehaus.groovy', name: 'groovy-cli-picocli', version: '3.0.9'
    implementation group: 'info.picocli', name: 'picocli', version: '4.6.1'

    implementation group:'ch.qos.logback', name:'logback-classic', version:'1.2.3'

    implementation("org.languagetool:language-uk:$ltUkVersion") {
        exclude module: 'hunspell'
        exclude module: 'language-detector'
        exclude module: 'lucene-core'
        exclude group: 'org.apache.lucene'
        exclude group: 'io.grpc'
    }
    implementation ("org.languagetool:language-ru:$ltVersion") {
        exclude module: 'hunspell'
        exclude module: 'language-detector'
        exclude module: 'lucene-core'
        exclude group: 'org.apache.lucene'
        exclude group: 'io.grpc'
    }

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.+'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.+'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

sourceSets {
    main {
        resources {
            srcDir "src/main/groovy"
//            include "**/*.groovy"
//            includes = ["**/tools/*.md", "*.groovy", "**/*.txt"]
        }
    }
}

processResources {
    doLast() {
        copy {
            from("src/main/groovy/") {
              include "org/nlp_uk/tools/TagText.groovy"
            }
//            into "${project.buildDir}/resources/main"
            into "${project.buildDir}/classes/java/main"
            includeEmptyDirs = false
        }
    }
}

compileGroovy {
    exclude '**/demo/**/*.groovy'
//    exclude '**/other/**/*.groovy'

    groovyOptions.forkOptions.jvmArgs = [ '-Dgroovy.grape.enable=false' ]
}


eclipse {
  classpath {
    defaultOutputDir = file('build')
    file {
        whenMerged { classpath ->
            classpath.entries.findAll { entry -> entry.kind == 'lib' && entry.path =~ /languagetool-core|language-(uk|ru)/ }*.exported = true
        }
    }
  }
}

test {
    useJUnitPlatform()
    jvmArgs '-Dgroovy.grape.enable=false'
}


task run(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "ua.net.nlp_uk.ubertext.MongoDriver"

    jvmArgs '-Dgroovy.grape.enable=false'

  //  args "--properties", propFile
}


// fatJar does not work due to LT having same file in different language modules
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'nlp_uk classes',
            'Implementation-Version': archiveVersion
    }
    archiveBaseName = project.name + '-all'
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


publishing {
    repositories {
        mavenLocal()
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
            //artifact dictJar
            //artifact ltJar
        }
    }
}


// windows have non-unicode encoding set by default
String osName = System.getProperty("os.name").toLowerCase();
if ( osName.contains("windows")) {
    if( ! "UTF-8".equals(System.getProperty("file.encoding")) ) {
        println "On Windows to get unicode handled correctly you need to set environment variable before running expand:"
        println "\tbash:"
        println "\t\texport JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8"
        println "\tcmd:"
        println "\t\t(change Font to 'Lucida Console' in cmd window properties)"
        println "\t\tchcp 65001"
        println "\t\tset JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8"
        println "\n\tNOTE: bash shell (e.g. git bash) is recommended: only in bash the output will handle all cyrillics and expandInteractive only supported in bash"

        // poor man's safety net (may work but still will not show all cyrillic characters)
        tasks.each { task ->
            if( task instanceof JavaExec ) {
                task.jvmArgs '-Dfile.encoding=UTF-8'
            }
        }
    }
}
